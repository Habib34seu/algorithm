#include <bits/stdc++.h>
using namespace std;

class Node{
    public:
        int data;
        Node *next;
};

class LinkedList{
    private:
       Node * first;
    public:
       LinkedList(){first=NULL;}
       LinkedList(int A[], int n);
       ~LinkedList();
       
       int LengthLinkedList();
       void DisplayLinkedList();
       void InsertLinkedList(int index, int x);
       void DeleteLinkedList(int index);
};

LinkedList:: LinkedList(int A[], int n)
{
    Node *last, *t;
    first=new Node;
    first->data=A[0];
    first->next=NULL;
    last=first;
     
    for(int i=1;i<n;i++)
     {
         t=new Node;
         t->data=A[i];
         t->next=NULL;
         last->next=t;
         last=t;
     }
    
}
LinkedList::~LinkedList()
{
     Node *p=first;
     while(first)
     {
         first=first->next;
         delete p;
         p=first;
     }
}
int LinkedList :: LengthLinkedList()
{
     Node *p = first;
    int count =0;
    
    while(p)
    {
        count = count+1;
        p=p->next;
    }
    
    return count;
}
void LinkedList:: InsertLinkedList(int index, int x)
{
    struct Node *t, *p=first;
    if(index < 0 || index > LengthLinkedList()) return;
    
    t = new Node();
    t->data = x;
    t->next = NULL;
    if(index ==0)
    {
        t->next = first;
        first = t;
    }
    else
    {
        for(int i=0; i<index-1; i++)
        {
            p = p->next;
        }
        t->next = p->next;
        p->next = t;
    }
    
}

void LinkedList:: DisplayLinkedList()
{
     Node *p = first;
    while (p)
    {
        cout<<p->data <<" ";
        p=p->next;
    }
}


int main() {
   
   int A[]={1,2,3,4,5};
   LinkedList l(A,5);
 
   l.InsertLinkedList(3,10);
 
   l.DisplayLinkedList();
 
   return 0;
}