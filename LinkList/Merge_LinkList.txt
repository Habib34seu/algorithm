#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    struct Node *next;
}*first = NULL,*second = NULL, *third = NULL;

int CountLinkList(struct Node *p)
{
    int count =0;
    
    while(p)
    {
        count = count+1;
        p=p->next;
    }
    
    return count;
}
void InsertLinkListFirst(struct Node *p, int index, int x)
{
    struct Node *t;
    if(index < 0 || index > CountLinkList(p)) return;
    
    t = new Node();
    t->data = x;
    
    if(index ==0)
    {
        t->next = first;
        first = t;
    }
    else
    {
        for(int i=0; i<index-1; i++)
        {
            p = p->next;
        }
        t->next = p->next;
        p->next = t;
    }
    
}

void InsertLinkListSecond(struct Node *p, int index, int x)
{
    struct Node *t;
    if(index < 0 || index > CountLinkList(p)) return;
    
    t = new Node();
    t->data = x;
    
    if(index ==0)
    {
        t->next = second;
        second = t;
    }
    else
    {
        for(int i=0; i<index-1; i++)
        {
            p = p->next;
        }
        t->next = p->next;
        p->next = t;
    }
    
}

void MergeLinkList(struct Node *p, struct Node *q)
{
    struct Node *last;
    if(p->data < q->data)
    {
        third = last = p;
        p = p->next;
        third->next = NULL;
    }
    else
    {
        third = last = q;
        q = q->next;
        third->next = NULL;
    }
    while(p && q)
    {
        if(p->data < q->data)
        {
            last->next = p;
            last = p;
            p = p->next;
            last->next=NULL;
        }
        else
        {
            last->next = q;
            last = q;
            q = q->next;
            last->next=NULL;
        }
    }
    
    if(p) last->next =p;
    else last->next =q;
    
}


void DisplayLinkList(struct Node *p)
{
    while (p)
    {
        cout<<p->data <<" ";
        p=p->next;
    }
}


int main() {
   //================FIRST LINK LIST==================
   InsertLinkListFirst (first,0,1); 
   InsertLinkListFirst (first,1,3); 
   InsertLinkListFirst (first,2,5); 
   InsertLinkListFirst (first,3,7); 
   InsertLinkListFirst (first,4,9); 
   InsertLinkListFirst (first,5,11); 
   InsertLinkListFirst (first,6,13); 
   
   //================SECOND LINK LIST==================
   
   InsertLinkListSecond (second,0,2); 
   InsertLinkListSecond (second,1,4); 
   InsertLinkListSecond (second,2,6); 
   InsertLinkListSecond (second,3,8); 
   InsertLinkListSecond (second,4,10); 
   InsertLinkListSecond (second,5,12); 
   InsertLinkListSecond (second,6,14); 
   
   cout<<"Create Link List First : ";
   DisplayLinkList(first);
   cout<<endl;
   cout<<"Create Link List Second : ";
   DisplayLinkList(second);
   
   cout<<endl;
   cout<<"After Merge Two Link List : ";
   MergeLinkList(first,second);
   DisplayLinkList(third);
    return 0;
}